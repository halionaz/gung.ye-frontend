generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  gungyePoint   Int    @default(0)
  accounts      Account[]
  Answer        Answer[]
  Article       Article[]
  Likes         Likes[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id              String   @id @default(cuid())
  title           String
  text            String   @db.Text
  userId          String
  imgsrc          String   @db.VarChar(255)
  postingDateTime DateTime @db.Timestamp(0)
  dueDateTime     DateTime @db.Timestamp(0)
  openDateTime    DateTime @db.Timestamp(0)
  Answer          Answer[]
  user            User     @relation(fields: [userId], references: [id])
  Likes           Likes[]

  @@index([userId], map: "Article_userId_fkey")
}

model Answer {
  id          String   @id @default(cuid())
  articleId   String
  userId      String
  answerVal   String   @db.Text
  postingDate DateTime @db.Timestamp(0)
  cost        Int
  article     Article  @relation(fields: [articleId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([articleId], map: "Answer_articleId_fkey")
  @@index([userId], map: "Answer_userId_fkey")
}

model Likes {
  id        String  @id @default(cuid())
  articleId String
  userId    String
  article   Article @relation(fields: [articleId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@index([articleId], map: "Likes_articleId_fkey")
  @@index([userId], map: "Likes_userId_fkey")
}
